<template>
  <div class="chart gnss-chart"></div>
</template>
<script>
import echarts from '@/common/echarts.custom';
import binary16ToRgba from '@/lib/util/binary16ToRgba';
import { xAxisData, xData, yData, zData, _2dData, _3dData } from './demoData';
export default {
  name: 'gnss-chart',
  props: ['hasAxisPointer'],
  data(){
    return {};
  },
  created(){},
  mounted(){
    const [ xColor, yColor, zColor, _2dColor, _3dColor ] = [ '#00ff18', '#ff8a00', '#ae00ff', '#009cff', '#fffc00' ];
    this.chart = echarts.init(this.$el);
    const option = {
      color: [ xColor, yColor, zColor, _2dColor, _3dColor ],
      grid: {
        top: 20,
        bottom: 35,
        left: 30,
        right: 24
      },
      legend: {
        right: 10,
        top: -5,
        itemWidth: 10,
        itemHeight: 10,
        itemGap: 5,
        textStyle: {
          color: 'rgba(255, 255, 255, 0.5)'
        },
        data:[
          { name: 'x', icon: 'roundRect' },
          { name: 'y', icon: 'roundRect' },
          { name: 'z', icon: 'roundRect' },
          { name: '2d', icon: 'roundRect' },
          { name: '3d', icon: 'roundRect' }
        ]
      },
      tooltip : {
        trigger: 'axis',
        confine: true,
        axisPointer: {
          type: this.hasAxisPointer === true ? 'cross' : 'none',
          animation: false,
          label: {
            color: 'rgba(255, 255, 255, 0.5)',
            backgroundColor: '#505765'
          }
        },
        textStyle: {
          color: 'rgba(255, 255, 255, 0.5)',
        }
      },
      dataZoom: [
        {
          show: true,
          realtime: true,
          height: 14,
          bottom: 0,
          backgroundColor: 'rgba(255, 255, 255, 0.1)',
          borderColor: 'transparent',
          dataBackground: {
            lineStyle: {
              opacity: 0
            },
            areaStyle: {
              opacity: 0
            }
          },
          fillerColor: 'rgba(255, 255, 255, 0.5)',
          handleStyle: {
            color: 'rgba(255, 255, 255, 0.5)'
          },
          textStyle: {
            color: 'rgba(255, 255, 255, 0.5)'
          },
          start: 65,
          end: 85
        },
        {
          type: 'inside',
          realtime: true,
          start: 65,
          end: 85
        }
      ],
      xAxis : [
        {
          type : 'category',
          boundaryGap : false,
          axisLine: {
            onZero: false,
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.5)'
            }
          },
          axisTick: {
            show: false
          },
          axisLabel: {
            fontSize: 8,
            margin: 5
          },
          data : xAxisData
        }
      ],
      yAxis: [
        {
          name: '位移(mm)',
          type: 'value',
          nameGap: 8,
          nameTextStyle: {
            color: 'rgba(255, 255, 255, 0.5)',
            padding: [ 0, 0, 0, 20 ]
          },
          axisLine: {
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.5)'
            }
          },
          axisTick: {
            show: false
          },
          axisLabel: {
            fontSize: 8,
            margin: 5
          },
          splitLine: {
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.05)'
            }
          }
        }
      ],
      series: [
        {
          name:'x',
          type:'line',
          animation: false,
          symbol: 'none',
          areaStyle: {
          color: new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:binary16ToRgba(xColor)},{offset:1,color:binary16ToRgba(xColor,0)}])
          },
          lineStyle: {
            color: xColor,
            width: 1
          },
            data: xData
        },
        {
          name:'y',
          type:'line',
          animation: false,
          symbol: 'none',
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:binary16ToRgba(yColor)},{offset:1,color:binary16ToRgba(yColor,0)}])
          },
          lineStyle: {
            color: yColor,
            width: 1
          },
            data: yData
        },
        {
          name:'z',
          type:'line',
          animation: false,
          symbol: 'none',
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:binary16ToRgba(zColor)},{offset:1,color:binary16ToRgba(zColor,0)}])
          },
          lineStyle: {
            color: zColor,
            width: 1
          },
            data: zData
        },
        {
          name:'2d',
          type:'line',
          animation: false,
          symbol: 'none',
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:binary16ToRgba(_2dColor)},{offset:1,color:binary16ToRgba(_2dColor,0)}])
          },
          lineStyle: {
            color: _2dColor,
            width: 1
          },
          data: _2dData
        },
        {
          name:'3d',
          type:'line',
          animation: false,
          symbol: 'none',
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:binary16ToRgba(_3dColor)},{offset:1,color:binary16ToRgba(_3dColor,0)}])
          },
          lineStyle: {
            color: _3dColor,
            width: 1
          },
          data: _3dData
        }
      ]
    };
    this.chart.setOption(option);
  },
  methods: {
  }
}
</script>
<style scoped lang="less">
.gnss-chart{
}
</style>